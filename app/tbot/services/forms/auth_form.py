from telebot.types import InlineKeyboardMarkup

from app.tbot.extensions.template import Template
from app.tbot.storages import BUTTONS_TEMPLATES
from app.tbot.storages.permissions import PERMISSIONS


class AuthForm(Template):
    """ –®–∞–±–ª–æ–Ω —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ """

    def create_markup(self) -> InlineKeyboardMarkup:
        """ –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É """
        user = self.args.get('user')
        if self.args.get('is_position'):
            for position in self.args['models']:
                btn = BUTTONS_TEMPLATES['get_position']
                btn.add(pk=position.id, departament=self.args['departament'])
                btn.text = position.name
                self.extend_keyboard(False, btn)
            self.extend_keyboard(True, BUTTONS_TEMPLATES['get_reg'])
            return self.build()

        elif self.args.get('is_department'):
            unique_args = [{'pk': department.id} for department in self.args['models']]
            return self.build_list(BUTTONS_TEMPLATES['get_department'], unique_args=unique_args)
        elif self.args.get('wrong'):
            markup = self.markup_builder.build_reply_keyboard(PERMISSIONS[user.role.name])
            return markup

    def create_message(self) -> str:
        """ –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ """
        title = 'üìù –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å'
        text = ''
        description = ''

        if self.args.get('is_name'):
            description = '‚ùï –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ:'

        elif self.args.get('is_department'):
            departments = '\n'.join([f'{i + 1}. {department.name}' for i, department in enumerate(self.args['models'])])
            description = '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ú–∞—Ä–∫.\n\n' \
                          '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ Performance review: –æ–±–∑–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏. –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç  –≤—ã—è–≤–∏—Ç—å ‚Äú—Å–ª–∞–±—ã–µ‚Äù –∏ ‚Äú—Å–∏–ª—å–Ω—ã–µ‚Äù –º–µ—Å—Ç–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–≤—ã—Å–∏—Ç—å  —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ü–µ–ª–æ–º.' \
                          '\n\n‚ùï –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –≤ –∫–∞–∫–æ–π –¥–∏—Ä–µ–∫—Ü–∏–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?\n\n' \
                          '–î–∏—Ä–µ–∫—Ü–∏–∏:\n' \
                          f'{departments}'

        elif self.args.get('is_position'):
            description = '‚ùï –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å?'

        elif self.args.get('is_boss'):
            try:
                name = self.args.get('fullname').split(' ')[1]
            except IndexError:
                name = self.args.get('fullname')
            description = f'–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {name.capitalize()}! –ö—Ç–æ —Ç–≤–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å?\n' \
                          f'‚ùï –ù–∞–ø–∏—à–∏ –ª–æ–≥–∏–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @login. ' \
                          f'–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –ù–ï–¢'

        elif self.args.get('is_end'):
            description = '‚ùï –°–ø–∞—Å–∏–±–æ. –°–∫–æ—Ä–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.'

        elif self.args.get('is_not_name'):
            description = '‚ùï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å–≤–æ–µ –§–ò–û:'

        elif self.args.get('is_not_position'):
            description = '‚ùï –¢–∞–∫–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'

        elif self.args.get('is_not_department'):
            description = '‚ùï –¢–∞–∫–æ–≥–æ –æ—Ç–¥–µ–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'

        elif self.args.get('exist'):
            description = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'

        elif self.args.get('no_username'):
            title = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–æ–≥–∏–Ω –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.'
            description = '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∏–∫–∞:' \
                          '\n1) –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å ' \
                          '(–≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)' \
                          '\n2) –í –ø–æ–ª–µ ¬´–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–∏–∫ ' \
                          '–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª'

        elif self.args.get('wrong'):
            description = '‚ùï –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.'

        else:
            description = ''

        message_text = self.message_builder.build_message(title=title,
                                                          description=description,
                                                          text=text,
                                                          )
        return message_text


__all__ = ['AuthForm']

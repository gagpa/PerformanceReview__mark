from telebot.types import InlineKeyboardMarkup

from app.models import Project
from app.services.dictinary.rating import RatingService
from app.tbot.extensions.template import Template
from app.tbot.storages import BUTTONS_TEMPLATES
from configs.bot_config import MAX_USERS_ON_PROJECT


class ProjectForm(Template):
    """ –®–∞–±–ª–æ–Ω —Ñ–æ—Ä–º—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ """

    def create_markup(self) -> InlineKeyboardMarkup:
        """ –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É """
        if self.args.get('have_markup'):
            review_type = self.args.get('review_type')
            review = self.args.get('review')
            project = self.args.get('project')
            coworker_comment_rating = self.args.get('rating')
            view = self.args.get('view')
            if review_type == 'write':
                if view == 'delete_choose_contact':
                    main_template = BUTTONS_TEMPLATES['review_form_project_delete_contact']
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_project_contacts_back'])
                    return self.build_list(main_template,
                                           unique_args=[{'contact': review.coworker.id} for review in project.reviews],
                                           project=project.id)
                elif view == 'edit_choose_contact':
                    main_template = BUTTONS_TEMPLATES['review_form_project_edit_contact']
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_project_contacts_back'])
                    return self.build_list(main_template,
                                           unique_args=[{'contact': review.coworker.id} for review in project.reviews],
                                           project=project.id)
                elif view == 'contacts':
                    if len(project.reviews) < MAX_USERS_ON_PROJECT:
                        self.extend_keyboard(False, BUTTONS_TEMPLATES['review_form_add_contact_in_current_project'])
                    if project.reviews:
                        self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_project_delete_choose_contact'],
                                             BUTTONS_TEMPLATES['review_form_project_edit_choose_contact'])
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_project_edit_back'])
                    return self.build(project=project.id)
                else:
                    self.extend_keyboard(False, BUTTONS_TEMPLATES['review_form_project_edit_name'],
                                         BUTTONS_TEMPLATES['review_form_project_edit_description'],
                                         BUTTONS_TEMPLATES['review_form_project_contacts'])
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_back_projects_list'])
                    return self.build(project=project.id)

            elif review_type == 'coworker':
                if view == 'rate':
                    unique_args = [{'rate': rating.id} for rating in RatingService().all]
                    rate = BUTTONS_TEMPLATES['coworker_rate']
                    back = BUTTONS_TEMPLATES['coworker_back_project']
                    back_to_projects = BUTTONS_TEMPLATES['coworker_back_projects'].add(review=review.id)
                    target = coworker_comment_rating.rating.value if coworker_comment_rating.rating else None
                    self.extend_keyboard(True, back, back_to_projects)
                    return self.build_list(rate, unique_args=unique_args, target=target,
                                           proj_rate=coworker_comment_rating.id,
                                           review=review.id)
                elif view == 'project':
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['coworker_choose_rate'],
                                         BUTTONS_TEMPLATES['coworker_comment'])
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['coworker_back_projects'].add(review=review.id))
                    return self.build(proj_rate=coworker_comment_rating.id, review=review.id)

    def add_project(self, project: Project):
        """ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ """
        list_text = ''
        text_rim = len(project.reviews)
        for i, review in enumerate(project.reviews):
            list_text = f'{list_text}{i + 1}){review.coworker.fullname} (@{review.coworker.username})'
            if i + 1 != text_rim:
                list_text = f'{list_text}\n'

        self.build_message(title='–ü—Ä–æ–µ–∫—Ç:',
                           text=project.name)
        self.build_message(title='–†–æ–ª—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:',
                           text=project.description)
        self.build_message(title='–û—Ü–µ–Ω–∏–≤–∞—é—â–∏–µ:',
                           text=list_text)

    def create_message(self) -> str:
        """ –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ """
        review_type = self.args.get('review_type')
        project = self.args.get('project')
        coworker_comment_rating = self.args.get('rating')
        view = self.args.get('view')
        if review_type == 'coworker':
            self.add_project(project)

            if coworker_comment_rating.rating:
                if coworker_comment_rating.rating.value == -1:
                    text = f'‚úñ'
                else:
                    text = f'{"üåü" * coworker_comment_rating.rating.value}'
                self.build_message(title='–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞:', text=text)
            if coworker_comment_rating.text:
                self.build_message(title='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–æ–µ–∫—Ç—É:', text=coworker_comment_rating.text)
            if coworker_comment_rating.hr_comment:
                self.build_message(description=f'–ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç HR: {coworker_comment_rating.hr_comment}')
            if view == 'comment':
                self.build_message(description='‚ùï –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–æ–µ–∫—Ç—É.')
            elif view == 'rate':
                text = ''
                for i, rating in enumerate(RatingService().all):
                    if rating.value == -1:
                        text = f'{text}‚úñ - {rating.name}\n'
                    else:
                        text = f'{text}{"üåü" * rating.value} - {rating.name}\n'
                self.build_message(description='‚ùï –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–µ–∫—Ç—É',
                                   text=text)
            return self.MESSAGE

        elif review_type == 'hr':
            self.add_project(project)
            if coworker_comment_rating.rating.value == -1:
                text = '‚úñ'
            else:
                text = f'{"üåü" * coworker_comment_rating.rating.value}'
            self.build_message(title='–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞:', text=text)
            self.build_message(title='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–æ–µ–∫—Ç—É:', text=coworker_comment_rating.text)
            if coworker_comment_rating.hr_comment:
                self.build_message(description='‚ùï –í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—é—â–µ–º—É –≤ —Å–≤–æ–µ–π –æ—Ü–µ–Ω–∫–µ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ.')
            return self.MESSAGE

        elif review_type == 'write':

            if view == 'edit':
                self.add_project(project)
                self.build_message(description='‚ùï –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ:')

            elif view == 'edit_name':
                self.add_project(project)
                self.build_message(description='‚ùï –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.')

            elif view == 'edit_description':
                self.add_project(project)
                self.build_message(description='‚ùï –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–≤–æ–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏.')

            elif view == 'edit_coworkers':
                self.add_project(project)
                self.build_message(description='‚ùï –ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ ‚Äú;‚Äù username –∫–æ–ª–ª–µ–≥:')

            elif view == 'change_coworker':
                self.add_project(project)
                self.build_message(description='‚ùï –í–≤–µ–¥–∏—Ç–µ username –∫–æ–ª–ª–µ–≥–∏:')

            elif view == 'contacts':
                self.add_project(project)
                self.build_message(description='‚ùï –í–Ω–µ—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤.')
                if len(project.reviews) >= MAX_USERS_ON_PROJECT:
                    self.build_message(description=f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏—Ö –≤ –ø—Ä–æ–µ–∫—Ç–µ - {MAX_USERS_ON_PROJECT}')

            elif view == 'delete_choose_contact':
                self.add_project(project)
                self.build_message(description='‚ùï –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–≥—É, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.')

            elif view == 'edit_choose_contact':
                self.add_project(project)
                self.build_message(description='‚ùï –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–≥—É, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–≥–æ.')

            elif not project.name:
                self.build_message(title='–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
                                   description='‚ùï –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')

            elif not project.description:
                self.build_message(title='–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
                                   description='\n‚ùï –û–ø–∏—à–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–≤–æ—é —Ä–æ–ª—å –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ:',
                                   text=f'\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n {project.name}')

            elif not project.reviews:
                self.build_message(title='–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
                                   description='\n‚ùï –ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ ‚Äú;‚Äù –∏–º–µ–Ω–∞ –∫–æ–ª–ª–µ–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º @:',
                                   text=f'\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n {project.name}\n'
                                        f'<b>–†–æ–ª—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n {project.description}\n\n'
                                        f'–í–≤–µ–¥–∏ username –∫–æ–ª–ª–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ü–µ–Ω–∏—Ç—å —Ç–≤–æ–π –≤–∫–ª–∞–¥ –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç: '
                                        f'–∫–æ–ª–ª–µ–≥–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ, –≤—Å–µ, —Å –∫–µ–º –ø–µ—Ä–µ—Å–µ–∫–∞–ª–∏—Å—å –ø–æ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ, —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, '
                                        f'—Ç–≤–æ–∏ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã–µ –∏ —Å—Ç–∞–∂–µ—Ä—ã.\n\n'
                                        f'–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ ‚Äì –µ—Å–ª–∏ —Ç—ã —É–∫–∞–∑–∞–ª –µ–≥–æ –Ω–∏–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, '
                                        f'–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ü–µ–Ω–∏—Ç –≤—Å–µ —Ç–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã.')
            else:
                coworkers = ' '.join(
                    [f'{review.coworker.fullname} (@{review.coworker.username})' for review in project.reviews])
                self.build_message(title=f'–ü—Ä–æ–µ–∫—Ç - {project.name}', text=f'–†–æ–ª—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {project.description}\n'
                                                                          f'–ö–æ–ª–ª–µ–≥–∏: {coworkers}')
            return self.MESSAGE


__all__ = ['ProjectForm']

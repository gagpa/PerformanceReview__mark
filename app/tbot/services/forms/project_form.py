from telebot.types import InlineKeyboardMarkup

from app.services.dictinary.rating import RatingService
from app.tbot.extensions import InlineKeyboardBuilder
from app.tbot.extensions.template import Template
from app.tbot.storages import BUTTONS_TEMPLATES


class ProjectForm(Template):
    """ –®–∞–±–ª–æ–Ω —Ñ–æ—Ä–º—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ """

    def create_markup(self) -> InlineKeyboardMarkup:
        """ –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É """
        if self.args.get('can_edit'):
            rows = []

            if self.args.get('is_name'):
                rows.append([BUTTONS_TEMPLATES['review_form_project_edit_description'],
                             BUTTONS_TEMPLATES['review_form_project_edit_contacts']])

            elif self.args.get('is_description'):
                rows.append([BUTTONS_TEMPLATES['review_form_project_edit_name'],
                             BUTTONS_TEMPLATES['review_form_project_edit_contacts']])

            elif self.args.get('is_contacts'):
                rows.append([BUTTONS_TEMPLATES['review_form_project_edit_name'],
                             BUTTONS_TEMPLATES['review_form_project_edit_description']])

            else:
                rows.append([BUTTONS_TEMPLATES['review_form_project_edit_name'],
                             BUTTONS_TEMPLATES['review_form_project_edit_description'],
                             BUTTONS_TEMPLATES['review_form_project_edit_contacts']])
            rows.append([BUTTONS_TEMPLATES['review_form_projects_list']])
            markup = InlineKeyboardBuilder.build(*rows, pk=self.args['model'].id)
            return markup

        elif self.args.get('on_rate'):
            arrow_btns = InlineKeyboardBuilder.build_btns_paginator_arrows(
                BUTTONS_TEMPLATES['coworker_review_projects_choose'],
                left_model=self.args.get('left_project'),
                right_model=self.args.get('right_project'),
            )
            form_btn = InlineKeyboardBuilder.build_btns(BUTTONS_TEMPLATES['coworker_review_form'],
                                                        pk=self.args['model'].form_id)
            markup = InlineKeyboardBuilder.build_list(RatingService().all,
                                                      BUTTONS_TEMPLATES['coworker_review_project_choose_rate'],
                                                      arrow_btns,
                                                      form_btn,
                                                      project_pk=self.args['model'].id
                                                      )
            return markup

    def create_message(self) -> str:
        """ –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ """
        title = '[–ü—Ä–æ–µ–∫—Ç]'
        text = ''

        if self.args.get('is_name'):
            description = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'

        elif self.args.get('is_description'):
            description = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–≤–æ–µ–π —Ä–æ–ª–∏ –Ω–∞ –Ω—ë–º'

        elif self.args.get('is_contacts'):
            description = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω—ã –∫–æ–ª–ª–µ–≥ –∫—Ç–æ –º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å'

        elif self.args.get('can_edit'):
            description = '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ'

        elif self.args.get('on_rate'):
            description = '–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –æ—Ç 1 üåü –¥–æ 5 üåü\n'
            for i, rating in enumerate(RatingService().all):
                description += f'{"üåü" * rating.value} - {rating.name}\n'
            if self.args.get('rating'):
                stars = 'üåü' * self.args['rating'].value
                text += f'–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {stars}\n'
            if self.args.get('comment'):
                text += '–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment}\n'.format(comment=self.args['comment'])
        else:
            description = ''
        text += f'{self.args["model"].name} {self.args["model"].description} {self.args["model"].users}'

        message_text = self.message_builder.build_message(title=title,
                                                          description=description,
                                                          text=text,
                                                          )
        return message_text


__all__ = ['ProjectForm']

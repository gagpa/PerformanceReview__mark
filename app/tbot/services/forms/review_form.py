from telebot.types import InlineKeyboardMarkup

from app.tbot.extensions.template import Template
from app.tbot.storages import BUTTONS_TEMPLATES


class ReviewForm(Template):
    """ –®–∞–±–ª–æ–Ω —Ñ–æ—Ä–º—ã –∞–Ω–∫–µ—Ç—ã """

    def create_markup(self) -> InlineKeyboardMarkup:
        if self.args.get('have_markup'):
            rows = []
            form = self.args.get('form')
            advice = self.args.get('advice')
            review_type = self.args.get('review_type')
            review = self.args.get('review')
            if review_type == 'write':
                self.extend_keyboard(False, BUTTONS_TEMPLATES['review_form_duties_list'],
                                     BUTTONS_TEMPLATES['review_form_projects_list'], )
                self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_achievements_list'],
                                     BUTTONS_TEMPLATES['review_form_fails'])
                if form.achievements and form.fails and form.projects and form.duties:
                    if form.user.boss:
                        self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_send_to_boss'])
                    elif form.coworker_reviews:
                        self.extend_keyboard(True, BUTTONS_TEMPLATES['review_send_coworkers'].add(form=form.id))
                return self.build(form=form.id)

            elif review_type == 'boss':
                self.extend_keyboard(False, BUTTONS_TEMPLATES['boss_review_accept'],
                                     BUTTONS_TEMPLATES['boss_review_decline'])
                self.extend_keyboard(True, BUTTONS_TEMPLATES['boss_review_list'])
                markup = self.build(review=review.id)
                return markup

            elif review_type == 'coworker':
                self.extend_keyboard(False, BUTTONS_TEMPLATES['coworker_projects'])
                self.extend_keyboard(True, BUTTONS_TEMPLATES['coworker_review_advices_todo'].add(type='todo'),
                                     BUTTONS_TEMPLATES['coworker_review_advices_not_todo'].add(type='not todo'))
                if review.advices and any(advice.advice_type.name == 'todo' for advice in review.advices) \
                    and any(advice.advice_type.name == 'not todo' for advice in review.advices) \
                    and all(rating.text and rating.rating for rating in review.projects_ratings):
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['coworker_review_form_send_to_hr'])
                self.extend_keyboard(True, BUTTONS_TEMPLATES['coworker_review_list'])
                markup = self.build(review=review.id)
                return markup

            elif review_type == 'hr':

                if self.args.get('accept'):
                    pass

                elif self.args.get('decline'):
                    self.extend_keyboard(False, BUTTONS_TEMPLATES['hr_review_todo'].add(type='todo'),
                                         BUTTONS_TEMPLATES['hr_review_not_todo'].add(type='not todo'),
                                         BUTTONS_TEMPLATES['hr_review_ratings'])
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['hr_review_send_back'])
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['hr_review_back_to_form'])
                    return self.build(review=review.id)
                else:
                    self.extend_keyboard(False, BUTTONS_TEMPLATES['hr_review_accept'],
                                         BUTTONS_TEMPLATES['hr_review_decline'])
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['hr_review_list'])
                    return self.build(review=review.id)

    def create_message(self) -> str:
        form_text = ''
        form = self.args.get('form')
        advice = self.args.get('advice')
        review_type = self.args.get('review_type')
        review = self.args.get('review')
        ratings = self.args.get('ratings')
        view = self.args.get('view')
        fill_volume = 0
        max_volume = 4
        if review_type == 'write':
            self.build_message(title='üìù –ê–Ω–∫–µ—Ç–∞')
            fill_instance = ''
            if form.duties:
                fill_volume += 1
                list_text = [f'{duty.text}' for duty in form.duties]
                self.build_list_message(title='‚ñ™Ô∏è–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', list_text=list_text)
            else:
                fill_instance += '\n‚ùå  –í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–∑–¥–µ–ª ‚Äú–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏‚Äù'

            if form.projects:
                fill_volume += 1
                find_coworkers = lambda project: '\n'.join(
                    [f"‚Ä¢ {review.coworker.fullname} (@{review.coworker.username})" for review in project.reviews])
                project_list_text = [
                    f'<b>{project.name}</b>\n<i>{project.description}</i>\n–û—Ü–µ–Ω–∏–≤–∞—é—â–∏–µ:\n{find_coworkers(project)}'
                    for project in form.projects]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–µ–∫—Ç—ã', list_text=project_list_text)

            else:
                fill_instance += '\n‚ùå  –í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–∑–¥–µ–ª ‚Äú–ü—Ä–æ–µ–∫—Ç—ã‚Äù'

            if form.achievements:
                fill_volume += 1
                list_text = [f'{achievement.text}' for achievement in form.achievements]
                self.build_list_message(title='‚ñ™Ô∏è–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', list_text=list_text)
            else:
                fill_instance += '\n‚ùå  –í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–∑–¥–µ–ª ‚Äú–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è‚Äù'

            if form.fails:
                fill_volume += 1
                list_text = [f'{fail.text}' for fail in form.fails]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–≤–∞–ª—ã', list_text=list_text)
            else:
                fill_instance += '\n‚ùå  –í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–∑–¥–µ–ª ‚Äú–ü—Ä–æ–≤–∞–ª—ã‚Äù'

            if fill_volume == max_volume:
                filling = f' - –°—Ç–∞—Ç—É—Å: {form.status.name} ‚úî'
            else:
                filling = f' - –°—Ç–∞—Ç—É—Å: –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ({int(fill_volume / max_volume * 100)}%)'
            if fill_volume == 0:
                bot_text = f'<i>–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ 4 —Ä–∞–∑–¥–µ–ª–∞ –∞–Ω–∫–µ—Ç—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–æ–ª–ª–µ–≥–∏ –º–æ–≥–ª–∏ –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É –æ—Ü–µ–Ω–∏—Ç—å ' \
                           f'—Ç–≤–æ—é —Ä–∞–±–æ—Ç—É. –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞—á–Ω–∏ —Å —Ä–∞–∑–¥–µ–ª–∞ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏.</i>\n\n' \
                           f'{filling}'
            else:
                bot_text = f'{filling}'

            if fill_instance:
                bot_text = f'{bot_text}\n\n' \
                           f'‚ùï  –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:' \
                           f'{fill_instance}'
            self.build_message(title='‚ñ´Ô∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∫–µ—Ç–µ',
                               text=bot_text)
            if form.boss_review and form.boss_review.text:
                self.build_message(title='‚ñ´ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', text=f' -  {form.boss_review.text}')
            return self.MESSAGE

        elif review_type == 'boss':
            self.build_message(title='üìù –ê–Ω–∫–µ—Ç–∞ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–≥–æ', text=f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {form.user.fullname}')
            if form.duties:
                list_text = [f'{duty.text}' for duty in form.duties]
                self.build_list_message(title='‚ñ™Ô∏è–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', list_text=list_text)
            if form.projects:
                find_coworkers = lambda project: '\n ‚Ä¢  '.join(
                    [f"@{review.coworker.username}" for review in project.reviews])
                list_text = [
                    f'{project.name}\n –û–ø–∏—Å–∞–Ω–∏–µ: {project.description}\n –û—Ü–µ–Ω–∏–≤–∞—é—â–∏–µ:\n ‚Ä¢  {find_coworkers(project)}'
                    for project in
                    form.projects]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–µ–∫—Ç—ã', list_text=list_text)
            if form.achievements:
                list_text = [f'{achievement.text}' for achievement in form.achievements]
                self.build_list_message(title='‚ñ™Ô∏è–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', list_text=list_text)
            if form.fails:
                list_text = [f'{fail.text}' for fail in form.fails]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–≤–∞–ª—ã', list_text=list_text)

            if review.text:
                self.build_message(title='‚ñ´ –í–∞—à –∫—Ä–∞–π–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', text=f' -  {review.text}')
            if view == 'decline':
                self.build_message(description='‚ùï –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç—É.')
            return self.MESSAGE

        elif review_type == 'coworker':
            self.build_message(title='üìù –ê–Ω–∫–µ—Ç–∞ –∫–æ–ª–ª–µ–≥–∏',
                               text=f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: @{form.user.username} - {form.user.fullname}\n'
                                    f'–û—Ü–µ–Ω–∏–≤–∞—é—â–∏–π: @{review.coworker.username} ‚Äì {review.coworker.fullname}')
            if form.duties:
                list_text = [f'{duty.text}' for duty in form.duties]
                self.build_list_message(title='‚ñ™Ô∏è–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', list_text=list_text)
            if form.projects:
                find_coworkers = lambda project: '\n ‚Ä¢  '.join(
                    [f"@{review.coworker.username}" for review in project.reviews])
                list_text = [
                    f'{project.name}\n –û–ø–∏—Å–∞–Ω–∏–µ: {project.description}\n –û—Ü–µ–Ω–∏–≤–∞—é—â–∏–µ:\n ‚Ä¢  {find_coworkers(project)}'
                    for project in
                    form.projects]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–µ–∫—Ç—ã', list_text=list_text)
            if form.achievements:
                list_text = [f'{achievement.text}' for achievement in form.achievements]
                self.build_list_message(title='‚ñ™Ô∏è–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', list_text=list_text)
            if form.fails:
                list_text = [f'{fail.text}' for fail in form.fails]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–≤–∞–ª—ã', list_text=list_text)

            list_data = []
            for rating in ratings:
                if rating.text or rating.rating:
                    list_data.append(f'{rating.project.name}')
                if rating.rating:
                    list_data[-1] += f'\n -  –û—Ü–µ–Ω–∫–∞: {rating.rating.name} {"üåü" * rating.rating.value}'
                if rating.text:
                    list_data[-1] += f'\n -  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {rating.text}'
                if rating.hr_comment:
                    list_data[-1] += f'<i>\n‚ùó –ò—Å–ø—Ä–∞–≤–∏—Ç—å: {rating.hr_comment}</i>'
            if list_data:
                self.build_list_message(title='‚ñ´ –û—Ü–µ–Ω–∫–∏ –∫–æ–ª–ª–µ–≥–∏', list_text=list_data)

            if review.advices:
                todo = []
                not_todo = []
                for advice in review.advices:
                    if advice.advice_type.name == 'todo':
                        todo.append(advice)
                    else:
                        not_todo.append(advice)
                self.build_message(title='‚ñ´ –°–æ–≤–µ—Ç—ã –∫–æ–ª–ª–µ–≥–∏')
                if todo:
                    for i, advice in enumerate(todo):
                        if i > 0:
                            text = f'{text}\n‚Ä¢ {advice.text}'
                        else:
                            text = f'‚Ä¢ {advice.text}'
                        if advice.hr_comment:
                            sub_text = f'<i>‚ùó –ò—Å–ø—Ä–∞–≤–∏—Ç—å: {advice.hr_comment}</i>'
                            text = f'{text}\n{sub_text}'
                    self.build_message(title='–ß—Ç–æ –Ω–∞—á–∞—Ç—å –¥–µ–ª–∞—Ç—å:',
                                       text=text)
                if not_todo:
                    for i, advice in enumerate(not_todo):
                        if i > 0:
                            text = f'{text}\n‚Ä¢ {advice.text}'
                        else:
                            text = f'‚Ä¢ {advice.text}'
                        if advice.hr_comment:
                            sub_text = f'<i>‚ùó –ò—Å–ø—Ä–∞–≤–∏—Ç—å: {advice.hr_comment}</i>'
                            text = f'{text}\n{sub_text}'
                    self.build_message(title='–ß—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –¥–µ–ª–∞—Ç—å:',
                                       text=text)
            if not any(advice.hr_comment for advice in review.advices) and not any(
                rating.hr_comment for rating in ratings):
                count_comment = 0
                count_rate = 0
                max_rates = len(review.projects_ratings) or 1
                for rating in review.projects_ratings:
                    if rating.text:
                        count_comment += 1
                    if rating.rating:
                        count_rate += 1
                ratings_percent = int(count_rate / max_rates * 100)
                rating_mark = '‚úÖ' if ratings_percent == 100 else '‚ùå'
                comments_percent = int(count_comment / max_rates * 100)
                comments_mark = '‚úÖ' if comments_percent == 100 else '‚ùå'

                self.build_message(description=f'‚ùï –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n'
                                               f' {rating_mark}  –í—ã –æ—Ü–µ–Ω–∏–ª–∏ {int(count_rate / max_rates * 100)}% –ø—Ä–æ–µ–∫—Ç–æ–≤\n'
                                               f' {comments_mark}  –í—ã –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ {int(count_comment / max_rates * 100)}% –ø—Ä–æ–µ–∫—Ç–æ–≤\n'
                                               f' {"‚úÖ" if review.advices and any(advice.advice_type.name == "todo" for advice in review.advices) else "‚ùå"}  "–ß—Ç–æ –¥–µ–ª–∞—Ç—å?"\n'
                                               f' {"‚úÖ" if review.advices and any(advice.advice_type.name == "not todo" for advice in review.advices) else "‚ùå"}  "–ß—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –¥–µ–ª–∞—Ç—å?"\n')
            return self.MESSAGE

        elif review_type == 'hr':
            self.build_message(title='üìù –ê–Ω–∫–µ—Ç–∞ –∫–æ–ª–ª–µ–≥–∏',
                               text=f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: @{form.user.username} - {form.user.fullname}')
            if form.duties:
                list_text = [f'{duty.text}' for duty in form.duties]
                self.build_list_message(title='‚ñ™Ô∏è–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', list_text=list_text)
            if form.projects:
                find_coworkers = lambda project: '\n ‚Ä¢  '.join(
                    [f"@{review.coworker.username}" for review in project.reviews])
                list_text = [
                    f'{project.name}\n –û–ø–∏—Å–∞–Ω–∏–µ: {project.description}\n –û—Ü–µ–Ω–∏–≤–∞—é—â–∏–µ:\n ‚Ä¢  {find_coworkers(project)}'
                    for project in
                    form.projects]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–µ–∫—Ç—ã', list_text=list_text)
            if form.achievements:
                list_text = [f'{achievement.text}' for achievement in form.achievements]
                self.build_list_message(title='‚ñ™Ô∏è–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', list_text=list_text)
            if form.fails:
                list_text = [f'{fail.text}' for fail in form.fails]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–≤–∞–ª—ã', list_text=list_text)

            list_data = []
            for rating in ratings:
                if rating.text or rating.rating:
                    list_data.append(f'{rating.project.name}')
                if rating.rating:
                    list_data[-1] += f'\n–û—Ü–µ–Ω–∫–∞: {rating.rating.name} {"üåü" * rating.rating.value}'
                if rating.text:
                    list_data[-1] += f'\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {rating.text}'
                if rating.hr_comment:
                    list_data[-1] += f'<i>\n‚ùó –ò—Å–ø—Ä–∞–≤–∏—Ç—å: {rating.hr_comment}</i>'
            if list_data:
                self.build_list_message(title='‚ñ´ –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏', list_text=list_data)

            if review.advices:
                todo = []
                not_todo = []
                for advice in review.advices:
                    if advice.advice_type.name == 'todo':
                        todo.append(advice)

                    else:
                        not_todo.append(advice)

                self.build_message(title='‚ñ´ –í–∞—à–∏ —Å–æ–≤–µ—Ç—ã')
                if todo:
                    for i, advice in enumerate(todo):
                        if i > 0:
                            text = f'{text}\n‚Ä¢ {advice.text}'
                        else:
                            text = f'‚Ä¢ {advice.text}'
                        if advice.hr_comment:
                            sub_text = f'<i>‚ùó –ò—Å–ø—Ä–∞–≤–∏—Ç—å: {advice.hr_comment}</i>"'
                            text = f'{text}\n{sub_text}'
                    self.build_message(title='–ß—Ç–æ –Ω–∞—á–∞—Ç—å –¥–µ–ª–∞—Ç—å:',
                                       text=text)
                if not_todo:
                    for i, advice in enumerate(not_todo):
                        if i > 0:
                            text = f'{text}\n‚Ä¢ {advice.text}'
                        else:
                            text = f'‚Ä¢ {advice.text}'
                        if advice.hr_comment:
                            sub_text = f'<i>‚ùó –ò—Å–ø—Ä–∞–≤–∏—Ç—å: {advice.hr_comment}</i>"'
                            text = f'{text}\n{sub_text}'
                    self.build_message(title='–ß—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –¥–µ–ª–∞—Ç—å:',
                                       text=text)
            if view == 'todo':
                self.build_message(description='‚ùï –í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–í–∞—à–∏ —Å–æ–≤–µ—Ç—ã".')
            return self.MESSAGE

        elif review_type == 'not_active':
            self.build_message(description='‚ùï –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç.')
            return self.MESSAGE


__all__ = ['ReviewForm']

from telebot.types import InlineKeyboardMarkup

from app.tbot.extensions.template import Template
from app.tbot.storages import BUTTONS_TEMPLATES


class ReviewForm(Template):
    """ –®–∞–±–ª–æ–Ω —Ñ–æ—Ä–º—ã –∞–Ω–∫–µ—Ç—ã """

    def create_markup(self) -> InlineKeyboardMarkup:
        if self.args.get('have_markup'):
            rows = []
            form = self.args.get('form')
            advice = self.args.get('advice')
            review_type = self.args.get('review_type')
            review = self.args.get('review')
            if review_type == 'write':
                self.extend_keyboard(False, BUTTONS_TEMPLATES['review_form_duty'],
                                     BUTTONS_TEMPLATES['review_form_projects_list'], )
                self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_achievements_list'],
                                     BUTTONS_TEMPLATES['review_form_fails'])
                if form.achievements and form.fails and form.projects and form.duty:
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_send_to_boss'])
                return self.build(form=form.id)

            elif review_type == 'boss':
                self.extend_keyboard(False, BUTTONS_TEMPLATES['boss_review_accept'],
                                     BUTTONS_TEMPLATES['boss_review_decline'])
                self.extend_keyboard(True, BUTTONS_TEMPLATES['boss_review_list'])
                markup = self.build(review=review.id)
                return markup

            elif review_type == 'coworker':
                self.extend_keyboard(False, BUTTONS_TEMPLATES['coworker_projects'])
                self.extend_keyboard(True, BUTTONS_TEMPLATES['coworker_review_todo'],
                                     BUTTONS_TEMPLATES['coworker_review_not_todo'])
                if advice.todo and advice.not_todo and all(
                    rating.text and rating.rating for rating in review.projects_ratings):
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['coworker_review_form_send_to_hr'])
                self.extend_keyboard(True, BUTTONS_TEMPLATES['coworker_review_list'])
                markup = self.build(review=review.id)
                return markup

            elif review_type == 'hr':

                if self.args.get('accept'):
                    pass

                elif self.args.get('decline'):
                    self.extend_keyboard(False, BUTTONS_TEMPLATES['hr_review_todo'],
                                         BUTTONS_TEMPLATES['hr_review_ratings'])
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['hr_review_send_back'])
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['hr_review_back_to_form'])
                    return self.build(review=review.id)

                else:
                    self.extend_keyboard(False, BUTTONS_TEMPLATES['hr_review_accept'],
                                         BUTTONS_TEMPLATES['hr_review_decline'])
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['hr_review_list'])
                    return self.build(review=review.id)

    def create_message(self) -> str:
        form_text = ''
        form = self.args.get('form')
        advice = self.args.get('advice')
        review_type = self.args.get('review_type')
        review = self.args.get('review')
        ratings = self.args.get('ratings')
        view = self.args.get('view')
        fill_volume = 0
        max_volume = 4
        if review_type == 'write':
            self.build_message(title='üìù –ê–Ω–∫–µ—Ç–∞')
            if form.duty:
                fill_volume += 1
                self.build_message(title='‚ñ™Ô∏è–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', text=f' -  {form.duty.text}')
            if form.achievements:
                fill_volume += 1
                list_text = [f'{achievement.text}' for achievement in form.achievements]
                self.build_list_message(title='‚ñ™Ô∏è–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', list_text=list_text)
            if form.fails:
                fill_volume += 1
                list_text = [f'{fail.text}' for fail in form.fails]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–≤–∞–ª—ã', list_text=list_text)
            if form.projects:
                fill_volume += 1
                find_coworkers = lambda project: '\n -  '.join(
                    [f"@{review.coworker.username}" for review in project.reviews])
                list_text = [f'{project.name}\n -  {project.description}\n -  {find_coworkers(project)}' for project in
                             form.projects]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–µ–∫—Ç—ã', list_text=list_text)

            if fill_volume == max_volume:
                filling = f' -  –°—Ç–∞—Ç—É—Å: –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ ‚úî'
            else:
                filling = f' -  –°—Ç–∞—Ç—É—Å: –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ({int(fill_volume / max_volume * 100)}%)'
            self.build_message(title='‚ñ´Ô∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∫–µ—Ç–µ',
                               text=f' -  –û–ø—Ä–æ—Å –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è: {form.review_period.end_date}\n'
                                    f'{filling}')
            if form.boss_review:
                self.build_message(title='‚ñ´ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', text=f' -  {form.boss_review.text}')
            return self.MESSAGE

        elif review_type == 'boss':
            self.build_message(title='üìù –ê–Ω–∫–µ—Ç–∞ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–≥–æ', text=f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {form.user.fullname}')
            if form.duty:
                self.build_message(title='‚ñ™Ô∏è–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', text=f' -  {form.duty.text}')
            if form.achievements:
                list_text = [f'{achievement.text}' for achievement in form.achievements]
                self.build_list_message(title='‚ñ™Ô∏è–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', list_text=list_text)
            if form.fails:
                list_text = [f'{fail.text}' for fail in form.fails]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–≤–∞–ª—ã', list_text=list_text)
            if form.projects:
                find_coworkers = lambda project: '\n -  '.join(
                    [f"@{review.coworker.username}" for review in project.reviews])
                list_text = [f'{project.name}\n -  {project.description}\n -  {find_coworkers(project)}' for project in
                             form.projects]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–µ–∫—Ç—ã', list_text=list_text)
            if review.text:
                self.build_message(title='‚ñ´ –í–∞—à –∫—Ä–∞–π–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', text=f' -  {review.text}')
            if view == 'decline':
                self.build_message(description='‚ùï  –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç—É')
            return self.MESSAGE

        elif review_type == 'coworker':
            self.build_message(title='üìù –ê–Ω–∫–µ—Ç–∞ –∫–æ–ª–ª–µ–≥–∏',
                               text=f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: @{form.user.username} - {form.user.fullname}')
            if form.duty:
                self.build_message(title='‚ñ™Ô∏è–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', text=f' -  {form.duty.text}')
            if form.achievements:
                list_text = [f'{achievement.text}' for achievement in form.achievements]
                self.build_list_message(title='‚ñ™Ô∏è–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', list_text=list_text)
            if form.fails:
                list_text = [f'{fail.text}' for fail in form.fails]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–≤–∞–ª—ã', list_text=list_text)
            if form.projects:
                find_coworkers = lambda project: '\n -  '.join(
                    [f"@{review.coworker.username}" for review in project.reviews])
                list_text = [f'{project.name}\n -  {project.description}\n -  {find_coworkers(project)}' for project in
                             form.projects]
                self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–µ–∫—Ç—ã', list_text=list_text)
            list_data = []
            for rating in ratings:
                if rating.text or rating.rating:
                    list_data.append(f'{rating.project.name}')
                if rating.rating:
                    list_data[-1] += f'\n -  –û—Ü–µ–Ω–∫–∞: {rating.rating.name} {"üåü" * rating.rating.value}'
                if rating.text:
                    list_data[-1] += f'\n -  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {rating.text}'
                if rating.hr_comment:
                    list_data[-1] += f'<i>\n‚ùï –ò—Å–ø—Ä–∞–≤–∏—Ç—å: {rating.hr_comment}</i>'
            if list_data:
                self.build_list_message(title='‚ñ´ –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏', list_text=list_data)

            if advice.todo or advice.not_todo:
                text = ''
                if advice.todo:
                    text += f'- –ß—Ç–æ –¥–µ–ª–∞—Ç—å: {advice.todo}\n'
                if advice.not_todo:
                    text += f'- –ß—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –¥–µ–ª–∞—Ç—å:{advice.not_todo}'
                if advice.hr_comment:
                    text += f'\n<i>‚ùï –ò—Å–ø—Ä–∞–≤–∏—Ç—å: {advice.hr_comment}</i>'
                self.build_message(title='‚ñ´ –í–∞—à–∏ —Å–æ–≤–µ—Ç—ã', text=text)
            if view == 'todo':
                self.build_message(description='‚ùï  –í–≤–µ–¥–∏—Ç–µ "–ß—Ç–æ —Å—Ç–æ–∏—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–µ–º—É –∫–æ–ª–ª–µ–≥–∏"')
            elif view == 'not todo':
                self.build_message(description='‚ùï  –í–≤–µ–¥–∏—Ç–µ "–ß—Ç–æ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –¥–µ–ª–∞—Ç—å –≤–∞—à–µ–º—É –∫–æ–ª–ª–µ–≥–∏"')
            elif not review.advice.hr_comment and not any(rating.hr_comment for rating in ratings):
                count_comment = 0
                count_rate = 0
                max_rates = len(review.projects_ratings)
                for rating in review.projects_ratings:
                    if rating.text:
                        count_comment += 1
                    elif rating.rating:
                        count_rate += 1
                self.build_message(description=f'‚ùï –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n'
                                               f' -  –í—ã –æ—Ü–µ–Ω–∏–ª–∏ {int(count_rate / max_rates * 100)}% –ø—Ä–æ–µ–∫—Ç–æ–≤\n'
                                               f' -  –í—ã –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ {int(count_comment / max_rates * 100)}% –ø—Ä–æ–µ–∫—Ç–æ–≤\n'
                                               f' -  "–ß—Ç–æ –¥–µ–ª–∞—Ç—å?" {"‚úîÔ∏è" if review.advice.todo else "‚ùå"}\n'
                                               f' -  "–ß—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –¥–µ–ª–∞—Ç—å?" {"‚úîÔ∏è" if review.advice.not_todo else "‚ùå"}\n')
            return self.MESSAGE

        elif review_type == 'hr':
            self.build_message(
                description=f'–û—Ü–µ–Ω–∏–≤–∞—é—â–∏–π @{advice.coworker_review.coworker.username}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ñ–æ—Ä–º—ã @{form.user.username}')
            self.build_message(title='–ê–Ω–∫–µ—Ç–∞', text=form_text)
            if ratings:
                list_data = []
                for rating in ratings:
                    list_data.append(
                        f'{rating.project.name}\n- –û—Ü–µ–Ω–∫–∞: {f"{rating.rating.name} {rating.text}" if rating.rating else "–ù–µ —Å—Ç–æ–∏—Ç"}')
                    if rating.hr_comment:
                        list_data[-1] += f'\n- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π HR: {rating.hr_comment}'
                self.build_list_message(title='–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏', list_text=list_data)

            if advice:
                self.build_message(title='–ß—Ç–æ –¥–µ–ª–∞—Ç—å/–ß—Ç–æ –Ω–µ –¥–µ–ª–∞—Ç—å?', description='', text='')
                if advice.todo:
                    self.build_message(title='', description='', text=f'- –ß—Ç–æ –¥–µ–ª–∞—Ç—å: {advice.todo}')
                if advice.not_todo:
                    self.build_message(title='', description='', text=f'- –ß—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –¥–µ–ª–∞—Ç—å:{advice.not_todo}')
                if advice.hr_comment:
                    self.build_message(title='', description='', text=f'- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π HR: {advice.hr_comment}')

            return self.MESSAGE


__all__ = ['ReviewForm']

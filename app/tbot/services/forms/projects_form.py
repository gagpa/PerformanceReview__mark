from telebot.types import InlineKeyboardMarkup

from app.tbot.extensions.template import Template
from app.tbot.storages import BUTTONS_TEMPLATES


class ProjectsForm(Template):
    """ –®–∞–±–ª–æ–Ω —Ñ–æ—Ä–º—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ """

    def create_markup(self) -> InlineKeyboardMarkup:
        """ –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É """
        if self.args.get('have_markup'):
            form = self.args.get('form')
            review_type = self.args.get('review_type')
            review = self.args.get('review')
            projects = self.args.get('projects')
            ratings = self.args.get('ratings')
            page = self.args.get('page')
            view = self.args.get('view')
            example = self.args.get('example')
            if review_type == 'write':
                if view == 'delete_choose':
                    unique_args = [{'project': project.id} for project in projects]
                    main_template = BUTTONS_TEMPLATES['review_form_project_delete']
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_back_projects_list'],
                                         BUTTONS_TEMPLATES['review_form'])
                    return self.build_list(main_template, unique_args, prefix='–ü—Ä–æ–µ–∫—Ç')
                elif view == 'edit_choose':
                    unique_args = [{'project': project.id} for project in projects]
                    main_template = BUTTONS_TEMPLATES['review_form_project_edit']
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_back_projects_list'],
                                         BUTTONS_TEMPLATES['review_form'])
                    return self.build_list(main_template, unique_args, prefix='–ü—Ä–æ–µ–∫—Ç')
                elif view == 'list':
                    self.extend_keyboard(False, BUTTONS_TEMPLATES['review_form_project_add'])
                    if projects:
                        self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form_project_edit_choose'],
                                             BUTTONS_TEMPLATES['review_form_project_delete_choose'])
                    elif example:
                        self.extend_keyboard(False, BUTTONS_TEMPLATES['review_form_projects_descriptions'])
                    else:
                        self.extend_keyboard(False, BUTTONS_TEMPLATES['review_form_projects_examples'])
                    self.extend_keyboard(True, BUTTONS_TEMPLATES['review_form'])
                    return self.build()

            elif review_type == 'coworker':
                count_obj = len(ratings)
                ratings = self.cut_per_page(ratings, page)
                unique_args = [{'proj_rate': rating.id} for rating in ratings]
                main_template = BUTTONS_TEMPLATES['coworker_project']
                pagination_template = BUTTONS_TEMPLATES['coworker_projects'].add(review=review.id)
                back = BUTTONS_TEMPLATES['coworker_back_form'].add(review=review.id)
                self.extend_keyboard(False, back)
                self.add_paginator(paginator=pagination_template, page=page, count_obj=count_obj)
                return self.build_list(main_template, unique_args, prefix='–ü—Ä–æ–µ–∫—Ç')

            elif review_type == 'hr':
                count_obj = len(ratings)
                ratings = self.cut_per_page(ratings, page)
                main_template = BUTTONS_TEMPLATES['hr_review_comment_rating']
                back = BUTTONS_TEMPLATES['hr_review_back_to_decline'].add(review=review.id)
                pagination_template = BUTTONS_TEMPLATES['hr_review_ratings'].add(review=review.id)
                unique_args = [{'proj_rate': rating.id} for rating in ratings]
                self.extend_keyboard(False, back)
                self.add_paginator(paginator=pagination_template, page=page, count_obj=count_obj)
                return self.build_list(main_template, unique_args, prefix='–ü—Ä–æ–µ–∫—Ç')

    def create_message(self) -> str:
        """ –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ """
        review_type = self.args.get('review_type')
        review = self.args.get('review')
        projects = self.args.get('projects')
        page = self.args.get('page')
        ratings = self.args.get('ratings')
        form = self.args.get('form')
        view = self.args.get('view')
        example = self.args.get('example')
        if page:
            ratings = self.cut_per_page(ratings, page)
            projects = self.cut_per_page(projects, page)
        find_coworkers = lambda project: '\n ‚Ä¢  '.join(
            [f"@{review.coworker.username}" for review in project.reviews])
        project_list_text = [
            f'{project.name}\n –†–æ–ª—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {project.description}\n –û—Ü–µ–Ω–∏–≤–∞—é—â–∏–µ:\n ‚Ä¢  {find_coworkers(project)}'
            for project in
            projects]
        if review_type == 'hr':
            self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ü–µ–Ω–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤',
                                    list_text=project_list_text)
            list_data = []
            for rating in ratings:
                if rating.text or rating.rating:
                    list_data.append(f'{rating.project.name}')
                if rating.rating:
                    list_data[-1] += f'\n -  –û—Ü–µ–Ω–∫–∞: {rating.rating.name} {"üåü" * rating.rating.value}'
                if rating.text:
                    list_data[-1] += f'\n -  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {rating.text}'
                if rating.hr_comment:
                    list_data[-1] += f'\n‚ùó –ò—Å–ø—Ä–∞–≤–∏—Ç—å: {rating.hr_comment}'
            if list_data:
                self.build_list_message(title='‚ñ´ –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏', list_text=list_data)
            self.build_message(description=f'–ê–≤—Ç–æ—Ä: @{form.user.username}\n'
                                           f'–û—Ü–µ–Ω–∏–≤–∞—é—â–∏–π: @{review.coworker.username}')
            self.build_message(description='‚ùï –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, —É –∫–æ—Ç–æ—Ä–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.')
            return self.MESSAGE

        elif review_type == 'coworker':

            self.build_list_message(title='‚ñ™Ô∏è–ü—Ä–æ–µ–∫—Ç—ã –Ω–∞ –æ—Ü–µ–Ω–∫—É',
                                    list_text=project_list_text)
            list_data = []
            for rating in ratings:
                if rating.text or rating.rating:
                    list_data.append(f'{rating.project.name}')
                if rating.rating:
                    list_data[-1] += f'\n -  –û—Ü–µ–Ω–∫–∞: {rating.rating.name} {"üåü" * rating.rating.value}'
                if rating.text:
                    list_data[-1] += f'\n -  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {rating.text}'
                if rating.hr_comment:
                    list_data[-1] += f'\n‚ùó –ò—Å–ø—Ä–∞–≤–∏—Ç—å: {rating.hr_comment}'
            if list_data:
                self.build_list_message(title='‚ñ´ –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏', list_text=list_data)
            self.build_message(description='‚ùï –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å.')
            return self.MESSAGE

        elif review_type == 'write':
            title = '‚ñ™Ô∏è–ü—Ä–æ–µ–∫—Ç—ã\n'

            if view == 'list':
                if projects:
                    self.build_list_message(title=title,
                                            list_text=project_list_text)
                elif example:
                    self.build_message(title=title,
                                       text='‚Äú–ü—Ä–æ–µ–∫—Ç: –û—Ü–µ–Ω–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∑–∞ 1 –ø–æ–ª—É–≥–æ–¥–∏–µ 2021\n'
                                            '–û–ø–∏—Å–∞–Ω–∏–µ: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ò–¶ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 70 —á–µ–ª–æ–≤–µ–∫\n'
                                            '\n–ü—Ä–æ–µ–∫—Ç: –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è\n'
                                            '–û–ø–∏—Å–∞–Ω–∏–µ: –û–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∞ 15 –Ω–æ–≤–æ—Å—Ç–µ–π –æ —Ä–∞–±–æ—Ç–µ –æ—Ç–¥–µ–ª–æ–≤ –ò–¶\n'
                                            '\n–ü—Ä–æ–µ–∫—Ç: –û–±—É—á–µ–Ω–∏–µ\n'
                                            '–û–ø–∏—Å–∞–Ω–∏–µ: –°—Ö–æ–¥–∏–ª–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏–Ω–≥ –¥–ª—è –±–æ—Ç–æ–≤‚Äù\n',
                                       description='‚ùï –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äú–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç‚Äù –∏ –æ–ø–∏—à–∏ –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –æ—Ç–¥–µ–ª—å–Ω–æ:')

                else:
                    self.build_message(title=title,
                                       text='–î–æ–±–∞–≤—å –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–µ–ª–∞–ª(-–∞) –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª–≥–æ–¥–∞. –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å:\n'
                                            '‚Äì —Ü–µ–ª–∏ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤–ª–∏—è–ª(-–∞),\n'
                                            '‚Äì –ø—Ä–æ–µ–∫—Ç—ã, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–ª(-–∞), \n'
                                            '‚Äì –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–≤–æ–∏—Ö –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π,\n'
                                            '‚Äì –ø–ª–∞–Ω—ã –ø–æ —Ä–æ—Å—Ç—É –∏ —Ä–∞–∑–≤–∏—Ç–∏—é.\n',
                                       description='‚ùï –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äú–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç‚Äù –∏ –æ–ø–∏—à–∏ –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –æ—Ç–¥–µ–ª—å–Ω–æ:')
                return self.MESSAGE

            elif view == 'edit_choose':
                self.build_list_message(title=title,
                                        description='‚ùï –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.',
                                        list_text=project_list_text)

            elif view == 'delete_choose':
                self.build_list_message(title=title,
                                        description='‚ùï –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.',
                                        list_text=project_list_text)
            return self.MESSAGE


__all__ = ['ProjectsForm']
